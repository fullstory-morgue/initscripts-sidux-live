#!/bin/sh

PATH=/sbin:/bin:/usr/bin:/usr/sbin
export PATH

# override tool behaviour through distro-defaults
FLL_DISTRO_MODE="installed"
FLL_DISTRO_NAME="Kanotix"
[ -r /etc/default/distro ] && source /etc/default/distro
FLL_DISTRO_NAME="$(echo $FLL_DISTRO_NAME | tr [a-z] [A-Z])"

[ ! "$FLL_DISTRO_MODE" == "live" ] && exit 0

case "$1" in
	start) ;;
	stop) ;;
	restart|force-reload) ;;
esac

# Clean input/output
exec >/dev/console 2>&1 </dev/console

NORMAL="[0;39m"
RED="[1;31m"
GREEN="[1;32m"
YELLOW="[1;33m"
BLUE="[1;34m"
MAGENTA="[1;35m"
CYAN="[1;36m"
WHITE="[1;37m"

case "$0" in
	*halt)
		message="${YELLOW}${FLL_DISTRO_NAME} halted.${NORMAL}"
		command="halt"
		options="-p -d -i -f"
		;;
	*reboot)
		message="${GREEN}Preparing for reboot...${NORMAL}"
		command="reboot"
		options="-d -i -f"
		;;
	*)
		echo "$0: call this script as \"halt\" or \"reboot\" please!"
		exit 1
		;;
esac

# No sync and no wtmp entry if running from CD
options="$options -n"

mysleep() {
	for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40; do
		usleep 75000
		echo -n "$1.${NORMAL}"
	done
	echo ""
}

# Disable kernel messages
echo "0" > /proc/sys/kernel/printk

# poweroff pcmcia devices
if pidof cardmgr &>/dev/null; then
	echo -n "${BLUE}Shutting down PCMCIA devices...${NORMAL}"
	cardctl eject &>/dev/null
	sleep 2
	echo ""
fi

# Now kill them all
killall5 -15
sleep 1
echo -n "${BLUE}Sent all processes the TERM signal...${NORMAL}"
mysleep "$BLUE"

killall5 -9
sleep 1
echo -n "${RED}Sent all processes the KILL signal...${NORMAL}"
mysleep "$RED"

# Unmount network filesystems first before shutting down network
NETMOUNTS="$(awk '{if($1~/:/){print $2}}' /proc/mounts 2>/dev/null)"
if [ -n "$NETMOUNTS" ]; then
	echo "${BLUE}Unmounting network filesystems.${NORMAL}"
	umount -t nfs -arvf 2>/dev/null
fi

# Shutdown network
NETDEVICES="$(awk -F: '/eth.:/{print $1}' /proc/net/dev 2>/dev/null)"
if [ -n "$NETDEVICES" ]; then
	pidof pump &>/dev/null && { pump -k ; sleep 2; }
	echo -n "${BLUE}Shutting down network device${NORMAL}"
	for n in $NETDEVICES; do
		echo -n " ${MAGENTA}$n${NORMAL}"
		ifconfig $n down
	done
	echo ""
fi

# read cmdline params
NOEJECT=""
NOPROMPT=""
read CMDLINE <<EOT
$(cat /proc/cmdline 2>/dev/null)
EOT
case "$CMDLINE" in *noeject*) NOEJECT="yes"; ;; esac
case "$CMDLINE" in *noprompt*) NOPROMPT="yes"; ;; esac

CDROM="$(awk '/ \/cdrom /{print $1;exit 0;}' /proc/mounts)"

# This uses standard sysvinit
FINALCMD="/etc/$command"
[ -x /etc/$command ] || cp -p /sbin/$command /etc/
[ -x /etc/eject ] || ( [ -x /usr/bin/eject-live ] && cp -p /usr/bin/eject-live /etc/eject || cp -p /usr/bin/eject /etc/ )
LD_LINUX=ld-linux.so.2
[ -x /lib/ld-linux-x86-64.so.2 ] && LD_LINUX=ld-linux-x86-64.so.2
[ -x /etc/$LD_LINUX ] || cp -p /lib/$LD_LINUX /etc/

# Turn off swap, then unmount file systems.
swapoff -a &>/dev/null

echo "${BLUE}Unmounting file systems.${NORMAL}"

cd /

# Umount everything but root
umount -arvf 2>/dev/null
if [ "$?" != "0" ] ; then
	# Free loopback devices if necessary, so we can unmount the host media
	for i in /dev/loop*; do losetup -d $i 2>/dev/null; done
	# And retry
	umount -arf 2>/dev/null
fi

# Remove remaining unused modules
rmmod -a &>/dev/null

echo "$message" >/dev/console

# umount and eject CD-ROM
# noprompt implies noeject (backward compatibility)

if [ -z "$NOPROMPT" ]; then
	#umount -l /cdrom
	[ -n "$CDROM" -a -z "$NOEJECT" ] && /etc/$LD_LINUX /etc/eject -m -p "$CDROM" 2>/dev/null
	echo "${CYAN}Please remove CD, close cdrom drive and hit return.${NORMAL}"
	read
fi

# Now halt or reboot.
exec /etc/$LD_LINUX $FINALCMD $options >/dev/console 2>&1 </dev/console
